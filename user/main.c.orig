/**
  ******************************************************************************
  * @file RTC/Calendar/main.c
  * @author  MCD Application Team
  * @version  V3.0.0
  * @date  04/06/2009
  * @brief  Main program body
  ******************************************************************************
  * @copy
  *
  * THE PRESENT FIRMWARE WHICH IS FOR GUIDANCE ONLY AIMS AT PROVIDING CUSTOMERS
  * WITH CODING INFORMATION REGARDING THEIR PRODUCTS IN ORDER FOR THEM TO SAVE
  * TIME. AS A RESULT, STMICROELECTRONICS SHALL NOT BE HELD LIABLE FOR ANY
  * DIRECT, INDIRECT OR CONSEQUENTIAL DAMAGES WITH RESPECT TO ANY CLAIMS ARISING
  * FROM THE CONTENT OF SUCH FIRMWARE AND/OR THE USE MADE BY CUSTOMERS OF THE
  * CODING INFORMATION CONTAINED HEREIN IN CONNECTION WITH THEIR PRODUCTS.
  *
  * <h2><center>&copy; COPYRIGHT 2009 STMicroelectronics</center></h2>
  */

/* Includes ------------------------------------------------------------------*/
#include "include.h"

/* Private typedef -----------------------------------------------------------*/
/* Private define ------------------------------------------------------------*/
#define TxBufferSize   (sizeof(TxBuffer))                  //统计发送数组元素个数
#define RxBufferSize   (sizeof(TxBuffer))                  //接收数组元素个数与发送数组一致

#ifdef _GNUC_
#define PUTCHAR_PROTOTYPE int _io_putchar(int ch)
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif

/* Private macro -------------------------------------------------------------*/
/* Private variables ---------------------------------------------------------*/
static __IO uint32_t TimingDelay;
extern uint8_t KeyID[8];
uint8_t TxBuffer[8];     //发送数组
uint8_t RxBuffer[RxBufferSize];                      //接收数组
uint8_t DataSizeOfTransfer = 5;           //发送数据量等于发送数组元素个数
uint8_t DataSizeOfReceiver = RxBufferSize;           //接收数据量等于接收数组元素个数
uint8_t ACK_Data[6] = {0x7e, 0x00, 0x00, 0x01, 0x00, 0x00};
ComDataStruct ComData;
extern unsigned char gBattery[6][4608], gLock[3][4608];

LCD_CoordInfo DisInfoPic = {0, 0, 127, 170, 'U', 0},
              DisInfoName = {137, 44, 319, 68, 'U', 0},
              DisInfoDep = {137, 78, 319, 102, 'U', 0},
              DisInfoBattery = {192, 0, 239, 47, 'R', 0},
              DisInfoLock = {180, 153, 227, 200, 'u', 0},
              DisInfoTime = {137, 146, 319, 170, 'u', 0},
              DisInfoState = {137, 112, 209, 136, 'U', 0};

FlashDataInfoData_16 FLSH_PicData = {0x08040000, 0x08065fff, 2048, 0},
                     FLSH_AllPicData = {0x08040000, 0x08065fff, 77823, 0},
                     FLSH_NameData = {0x08066000, 0x0806afff, 10240, 0},
                     FLSH_ALLNameData = {0x08066000, 0x0806afff, 10240, 0},
                     FLSH_DepData = {0x0806b000, 0x0806ffff, 10240, 0},
                     FLSH_AllDepData = {0x0806b000, 0x0806ffff, 10240, 0},
                     FLSH_KeyData = {0x0806E000, 0x0806ffff, 10240, 0},
                     FLSH_AllKeyData = {0x0806E000, 0x0806ffff, 10240, 0};

TMR       TmrTbl[TMR_MAX_TMR];          /* Table of timers managed by this module             */

/* Private function prototypes -----------------------------------------------*/
void uDelay(uint16_t nTime);
void delay(__IO uint32_t nTime);

/* Private functions ---------------------------------------------------------*/

/*
*********************************************************************************************************
*                               Function executed when Timers Time Out
*********************************************************************************************************
*/

static  void  BatteryDisplayTimer (void *arg)
{
    arg = arg;
    if(DisInfoBattery.Offset == 5)
    {
        DisInfoBattery.Offset = 0;
    }
    LCD_Icon(&DisInfoBattery, gBattery[DisInfoBattery.Offset]);
    DisInfoBattery.Offset++;
}

static  void  ConmmunctionTimer (void *arg)
{
    arg = arg;
    ComData.CheckSum = 0;
    ComData.ComState = START;
    ComData.LenNum = 0;
    ComData.DataCount = 0;
    ComData.Length = 0;
    ComData.LastSeq = 0;
    ComData.Seq = 0;
    ComData.RevOK = REV_NORMAL;
}

TmrTaskConfig(void)
{
    TmrInit();
    TmrCfgFnct(FALSE, 0, ConmmunctionTimer, (void *)0);                  /* Execute when Timer #0 times out          */
    TmrCfgFnct(TRUE, 1, BatteryDisplayTimer, (void *)0);                  /* Execute when Timer #0 times out          */
    TmrSetMST(1, 0, 0, 5);                                 /* Set timer #0 to 0 min., 0 sec. 5/10 sec. */
    TmrSetMST(0, 0, 10, 0);                                 /* Set timer #0 to 0 min., 10 sec. 0/10 sec. */
    TmrStart(1);
}

/*******************************************************************************
* Function Name  : Time_Adjust
* Description    : Adjusts time.
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void Time_Reset(void)
{
    /* Wait until last write operation on RTC registers has finished */
    RTC_WaitForLastTask();
    /* Change the current time */
    RTC_SetCounter(0);
    /* Wait until last write operation on RTC registers has finished */
    RTC_WaitForLastTask();
}

void RTC_Init(void)
{
    /* RTC Configuration */
    RTC_Configuration();
    /* Adjust time by values entred by the user on the hyperterminal */
    Time_Reset();
    /* Wait for RTC registers synchronization */
    RTC_WaitForSynchro();
    /* Enable the RTC Second */
    RTC_ITConfig(RTC_IT_SEC, ENABLE);
    /* Wait until last write operation on RTC registers has finished */
    RTC_WaitForLastTask();
    /* Clear reset flags */
    RCC_ClearFlag();
}

void KeyCheck()
{
    {
        /* Key 1 */
        if(!GPIO_ReadInputDataBit(GPIOA, GPIO_Pin_0))           //检测PA0端口对应的按钮是否按下
        {
            GPIO_InitTypeDef GPIO_InitStructure;

            TmrStop(1);

            LCD_Icon(&DisInfoBattery, gBattery[5]);
            LCD_Icon(&DisInfoLock, gLock[0]);

            GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;             //时钟速度为50M
            GPIO_InitStructure.GPIO_Pin = GPIO_Pin_2;                   //发送脚为PA9
            //GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;             //复用推挽输出
            //GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;       //复用开漏输入
            GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
            GPIO_Init(GPIOC, &GPIO_InitStructure);                      //用以上几个参数初始化PA口
            GPIO_SetBits(GPIOC, GPIO_Pin_2);
        }
        /* Key 2 */
        if(!GPIO_ReadInputDataBit(GPIOC, GPIO_Pin_13))         //同上
        {
            LCD_Icon(&DisInfoLock, gLock[2]);
        }
        /* Key 3 */
        if(!GPIO_ReadInputDataBit(GPIOC, GPIO_Pin_4))          //同上
        {
            TmrStop(1);
            LCD_Icon(&DisInfoBattery, gBattery[6]);
        }
        /* Key 4 */
        if(!GPIO_ReadInputDataBit(GPIOC, GPIO_Pin_5))          //同上
        {
            TmrStart(1);
            LCD_Icon(&DisInfoLock, gLock[1]);
            GPIO_ResetBits(GPIOC, GPIO_Pin_2);
        }
    }
}

bool iButtonCheck(void)
{
    uint8_t SerialNum[8];
    uint8_t i = 0;

    if(OWTouchReset())
    {
        OWWriteByte(0x33);
        for(i = 0 ; i < 8; i++)
        {
            SerialNum [i] = OWReadByte();
            uDelay(20);
            if(SerialNum [i] != KeyID[i])
            {
                return FALSE;
            }
            //printf("%d", SerialNum[i]);
        }
        return TRUE;
    }

    return FALSE;
}

/**
  * @brief  Main program.
  * @param  None
  * @retval : None
  */
int main(void)
{
    SystemResourcesInit(RCC_INIT
                        | NVIC_INIT
                        | FSCM_INIT
                        | FLASH_INIT
                        | USART_INIT
                        | GPIO_INIT
                        | SYSTICK_INIT
                        | TIMER_INIT);
    TmrTaskConfig();
    LCD_ResInit();
	GetKeyID_From_Flash(&FLSH_KeyData);
    /* Background */
    //LCD_BackgroundUpdata(0xff00);     //Yellow
    LCD_BackgroundUpdata(0xffff);     //White
    /* Pic */
    LCD_DisplayFlashPic(&DisInfoPic, &FLSH_PicData);
    /* Name and Info */
    LCD_DisplayCharFromFlash(&DisInfoName, &FLSH_NameData);
    LCD_DisplayCharFromFlash(&DisInfoDep, &FLSH_DepData);
    /* State */
    LCD_DisplayChinese(&DisInfoState, "状态：", 0x0000, 0xffff);
    /* RTC */
    RTC_Init();
    //printf("\n\r重庆DQ电子串口中断方式发送和接收测试程序\n\r");
    //printf("\n\r请发送一个大于等于8位的字符串\n\r");
    while(1)
    {
        PersonalInfoMgt();
        if(iButtonCheck() == TRUE)
        {
            LCD_Icon(&DisInfoLock, gLock[2]);
        }
        TmrTask(0);
        Time_Display(RTC_GetCounter(), &DisInfoTime);
        //KeyCheck();
    }
}

/*******************************************************************************
* Function Name  : PUTCHAR_PROTOTYPE
* Description    : 重定义C语言的fprint函数
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
PUTCHAR_PROTOTYPE

{
    /* Write a character to the USART */
    USART_SendData(USART1, (uint8_t)ch);

    /* Loop until the end of transmission */
    while(USART_GetFlagStatus(USART1, USART_FLAG_TXE) == RESET)
        ;

    return ch;
}

/**
 * @brief  Inserts a delay time.
 * @param nTime: specifies the delay time length, in milliseconds.
 * @retval : None
 */
void delay(__IO uint32_t nTime)
{
    TimingDelay = nTime;

    while(TimingDelay != 0);
}

/**
 * @brief  Inserts a delay time.
 * @param nTime: specifies the delay time length, in milliseconds.
 * @retval : None
 */
void uDelay(uint16_t nTime)
{
    uint16_t TIMCounter = nTime;

    TIM_Cmd(TIM2, ENABLE);
    TIM_SetCounter(TIM2, TIMCounter);
    while (TIMCounter > 1)
    {
        TIMCounter = TIM_GetCounter(TIM2);
    }
    TIM_Cmd(TIM2, DISABLE);
}

/**
* @brief  Decrements the TimingDelay variable.
* @param  None
* @retval : None
*/
void TimingDelay_Decrement(void)
{
    if (TimingDelay != 0x00)
    {
        TimingDelay--;
    }
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *   where the assert_param error has occurred.
  * @param file: pointer to the source file name
  * @param line: assert_param error line source number
  * @retval : None
  */
void assert_failed(uint8_t* file, uint32_t line)
{
    /* User can add his own implementation to report the file name and line number,
       ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
    /* Infinite loop */
    while (1)
    {}
}
#endif

/**
  * @}
  */

/**
  * @}
  */

/******************* (C) COPYRIGHT 2009 STMicroelectronics *****END OF FILE****/
